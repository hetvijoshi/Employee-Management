//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExperienceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QualificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeID {
            get {
                return this.EmployeeIDField;
            }
            set {
                if ((this.EmployeeIDField.Equals(value) != true)) {
                    this.EmployeeIDField = value;
                    this.RaisePropertyChanged("EmployeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Experience {
            get {
                return this.ExperienceField;
            }
            set {
                if ((object.ReferenceEquals(this.ExperienceField, value) != true)) {
                    this.ExperienceField = value;
                    this.RaisePropertyChanged("Experience");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fullname {
            get {
                return this.FullnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullnameField, value) != true)) {
                    this.FullnameField = value;
                    this.RaisePropertyChanged("Fullname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Qualification {
            get {
                return this.QualificationField;
            }
            set {
                if ((object.ReferenceEquals(this.QualificationField, value) != true)) {
                    this.QualificationField = value;
                    this.RaisePropertyChanged("Qualification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Leave", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Leave : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EmployeeClient.ServiceReference1.Employee EmployeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LeaveIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EmployeeClient.ServiceReference1.Employee Employee {
            get {
                return this.EmployeeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeField, value) != true)) {
                    this.EmployeeField = value;
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeaveId {
            get {
                return this.LeaveIdField;
            }
            set {
                if ((this.LeaveIdField.Equals(value) != true)) {
                    this.LeaveIdField = value;
                    this.RaisePropertyChanged("LeaveId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        bool Register(EmployeeClient.ServiceReference1.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(EmployeeClient.ServiceReference1.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/auth", ReplyAction="http://tempuri.org/IService1/authResponse")]
        EmployeeClient.ServiceReference1.Employee auth(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/auth", ReplyAction="http://tempuri.org/IService1/authResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> authAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Delete", ReplyAction="http://tempuri.org/IService1/DeleteResponse")]
        bool Delete(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Delete", ReplyAction="http://tempuri.org/IService1/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Update", ReplyAction="http://tempuri.org/IService1/UpdateResponse")]
        EmployeeClient.ServiceReference1.Employee Update(string name, EmployeeClient.ServiceReference1.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Update", ReplyAction="http://tempuri.org/IService1/UpdateResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> UpdateAsync(string name, EmployeeClient.ServiceReference1.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search", ReplyAction="http://tempuri.org/IService1/SearchResponse")]
        EmployeeClient.ServiceReference1.Employee Search(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search", ReplyAction="http://tempuri.org/IService1/SearchResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> SearchAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReqLeave", ReplyAction="http://tempuri.org/IService1/ReqLeaveResponse")]
        bool ReqLeave(EmployeeClient.ServiceReference1.Leave leave, int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReqLeave", ReplyAction="http://tempuri.org/IService1/ReqLeaveResponse")]
        System.Threading.Tasks.Task<bool> ReqLeaveAsync(EmployeeClient.ServiceReference1.Leave leave, int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeaves", ReplyAction="http://tempuri.org/IService1/GetLeavesResponse")]
        EmployeeClient.ServiceReference1.Leave[] GetLeaves();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeaves", ReplyAction="http://tempuri.org/IService1/GetLeavesResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave[]> GetLeavesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployees", ReplyAction="http://tempuri.org/IService1/GetEmployeesResponse")]
        EmployeeClient.ServiceReference1.Employee[] GetEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployees", ReplyAction="http://tempuri.org/IService1/GetEmployeesResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee[]> GetEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setEmployee", ReplyAction="http://tempuri.org/IService1/setEmployeeResponse")]
        bool setEmployee(EmployeeClient.ServiceReference1.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setEmployee", ReplyAction="http://tempuri.org/IService1/setEmployeeResponse")]
        System.Threading.Tasks.Task<bool> setEmployeeAsync(EmployeeClient.ServiceReference1.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployee", ReplyAction="http://tempuri.org/IService1/GetEmployeeResponse")]
        EmployeeClient.ServiceReference1.Employee GetEmployee(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployee", ReplyAction="http://tempuri.org/IService1/GetEmployeeResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> GetEmployeeAsync(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateLeave", ReplyAction="http://tempuri.org/IService1/UpdateLeaveResponse")]
        EmployeeClient.ServiceReference1.Leave UpdateLeave(int eid, EmployeeClient.ServiceReference1.Leave leave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateLeave", ReplyAction="http://tempuri.org/IService1/UpdateLeaveResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave> UpdateLeaveAsync(int eid, EmployeeClient.ServiceReference1.Leave leave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeave", ReplyAction="http://tempuri.org/IService1/GetLeaveResponse")]
        EmployeeClient.ServiceReference1.Leave GetLeave(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeave", ReplyAction="http://tempuri.org/IService1/GetLeaveResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave> GetLeaveAsync(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLeave", ReplyAction="http://tempuri.org/IService1/DeleteLeaveResponse")]
        bool DeleteLeave(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLeave", ReplyAction="http://tempuri.org/IService1/DeleteLeaveResponse")]
        System.Threading.Tasks.Task<bool> DeleteLeaveAsync(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeavesemp", ReplyAction="http://tempuri.org/IService1/GetLeavesempResponse")]
        EmployeeClient.ServiceReference1.Leave[] GetLeavesemp(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeavesemp", ReplyAction="http://tempuri.org/IService1/GetLeavesempResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave[]> GetLeavesempAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeavesstat", ReplyAction="http://tempuri.org/IService1/GetLeavesstatResponse")]
        EmployeeClient.ServiceReference1.Leave[] GetLeavesstat(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLeavesstat", ReplyAction="http://tempuri.org/IService1/GetLeavesstatResponse")]
        System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave[]> GetLeavesstatAsync(int eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLeavewlid", ReplyAction="http://tempuri.org/IService1/DeleteLeavewlidResponse")]
        bool DeleteLeavewlid(int lid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLeavewlid", ReplyAction="http://tempuri.org/IService1/DeleteLeavewlidResponse")]
        System.Threading.Tasks.Task<bool> DeleteLeavewlidAsync(int lid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EmployeeClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EmployeeClient.ServiceReference1.IService1>, EmployeeClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(EmployeeClient.ServiceReference1.Employee emp) {
            return base.Channel.Register(emp);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(EmployeeClient.ServiceReference1.Employee emp) {
            return base.Channel.RegisterAsync(emp);
        }
        
        public EmployeeClient.ServiceReference1.Employee auth(string email, string password) {
            return base.Channel.auth(email, password);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> authAsync(string email, string password) {
            return base.Channel.authAsync(email, password);
        }
        
        public bool Delete(string name) {
            return base.Channel.Delete(name);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string name) {
            return base.Channel.DeleteAsync(name);
        }
        
        public EmployeeClient.ServiceReference1.Employee Update(string name, EmployeeClient.ServiceReference1.Employee emp) {
            return base.Channel.Update(name, emp);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> UpdateAsync(string name, EmployeeClient.ServiceReference1.Employee emp) {
            return base.Channel.UpdateAsync(name, emp);
        }
        
        public EmployeeClient.ServiceReference1.Employee Search(string name) {
            return base.Channel.Search(name);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> SearchAsync(string name) {
            return base.Channel.SearchAsync(name);
        }
        
        public bool ReqLeave(EmployeeClient.ServiceReference1.Leave leave, int eid) {
            return base.Channel.ReqLeave(leave, eid);
        }
        
        public System.Threading.Tasks.Task<bool> ReqLeaveAsync(EmployeeClient.ServiceReference1.Leave leave, int eid) {
            return base.Channel.ReqLeaveAsync(leave, eid);
        }
        
        public EmployeeClient.ServiceReference1.Leave[] GetLeaves() {
            return base.Channel.GetLeaves();
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave[]> GetLeavesAsync() {
            return base.Channel.GetLeavesAsync();
        }
        
        public EmployeeClient.ServiceReference1.Employee[] GetEmployees() {
            return base.Channel.GetEmployees();
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee[]> GetEmployeesAsync() {
            return base.Channel.GetEmployeesAsync();
        }
        
        public bool setEmployee(EmployeeClient.ServiceReference1.Employee emp) {
            return base.Channel.setEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> setEmployeeAsync(EmployeeClient.ServiceReference1.Employee emp) {
            return base.Channel.setEmployeeAsync(emp);
        }
        
        public EmployeeClient.ServiceReference1.Employee GetEmployee(int eid) {
            return base.Channel.GetEmployee(eid);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Employee> GetEmployeeAsync(int eid) {
            return base.Channel.GetEmployeeAsync(eid);
        }
        
        public EmployeeClient.ServiceReference1.Leave UpdateLeave(int eid, EmployeeClient.ServiceReference1.Leave leave) {
            return base.Channel.UpdateLeave(eid, leave);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave> UpdateLeaveAsync(int eid, EmployeeClient.ServiceReference1.Leave leave) {
            return base.Channel.UpdateLeaveAsync(eid, leave);
        }
        
        public EmployeeClient.ServiceReference1.Leave GetLeave(int eid) {
            return base.Channel.GetLeave(eid);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave> GetLeaveAsync(int eid) {
            return base.Channel.GetLeaveAsync(eid);
        }
        
        public bool DeleteLeave(int eid) {
            return base.Channel.DeleteLeave(eid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLeaveAsync(int eid) {
            return base.Channel.DeleteLeaveAsync(eid);
        }
        
        public EmployeeClient.ServiceReference1.Leave[] GetLeavesemp(string name) {
            return base.Channel.GetLeavesemp(name);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave[]> GetLeavesempAsync(string name) {
            return base.Channel.GetLeavesempAsync(name);
        }
        
        public EmployeeClient.ServiceReference1.Leave[] GetLeavesstat(int eid) {
            return base.Channel.GetLeavesstat(eid);
        }
        
        public System.Threading.Tasks.Task<EmployeeClient.ServiceReference1.Leave[]> GetLeavesstatAsync(int eid) {
            return base.Channel.GetLeavesstatAsync(eid);
        }
        
        public bool DeleteLeavewlid(int lid) {
            return base.Channel.DeleteLeavewlid(lid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLeavewlidAsync(int lid) {
            return base.Channel.DeleteLeavewlidAsync(lid);
        }
    }
}
